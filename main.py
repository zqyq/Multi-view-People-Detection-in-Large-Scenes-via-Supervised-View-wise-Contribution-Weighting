import argparse
import os

import numpy as np
import torch

os.environ['OMP_NUM_THREADS'] = '1'
os.environ['CUDA_VISIBLE_DEVICES'] = '0,1'


def main(args):
    # root path
    project_root_path = os.path.abspath(os.path.dirname(__file__))
    args.project_root_path = project_root_path
    # seed
    if args.seed is not None:
        np.random.seed(args.seed)
        torch.manual_seed(args.seed)
        # torch.backends.cudnn.deterministic = True
        # torch.backends.cudnn.benchmark = False
        torch.backends.cudnn.benchmark = True
    else:
        torch.backends.cudnn.benchmark = True

    # For debug
    args.variant = '2D_SVP_VCW'
    # args.dataset = 'cvcs'
    args.dataset = 'citystreet'
    # args.dataset = 'wildtrack'
    # args.dataset = 'multiviewx'
    # args.arch = 'resnet18'
    args.arch = 'vgg16'
    # args.fix_2D = 1
    # args.fix_svp = 1
    # args.variant = '2D_SVP'
    # args.variant = '2D_SVP_VCW'

    # dataset selection
    if args.dataset == 'wildtrack' or args.dataset == 'multiviewx':  # Only for test
        # args.pretrain = '/mnt/data/Yunfei/Study/MVD_VCW/logs/cvcs_dataset/resnet18/2D_SVP_VCW/2023-12-11_21-03-06bs_1_mo0.9_wd0.0001_lr0.0001_lrslambda_epo50_valEpo5_ct0.4_nt5_dt5/latest_2D_SVP_VCW_model.pth'
        from x_training.W_M.model_run import model_run
    elif args.dataset == 'citystreet':  # Train the complete model
        from x_training.CityStreet.model_run import model_run
    elif args.dataset == 'cvcs':  # Train the complete model
        from x_training.CVCS.model_run import model_run
    else:
        raise Exception('Input wrong dataset name.')
    model_run(args)


if __name__ == '__main__':
    # settings
    parser = argparse.ArgumentParser(description='Multiview detector')
    parser.add_argument('--variant', type=str, default='2D_SVP_VCW',
                        choices=['default', '2D', '2D_SVP', '2D_VCW', '2D_SVP_VCW'],
                        help='2D means only train image feature extractor,2D+SVP means based on the trained extractor,'
                             ' we train the detector for single-view prediction, 2D+SVP+VCW means that based on the trained'
                             ' single-view detector, we train the overall detector for view-wise contribution weighting, the final detector.')
    parser.add_argument('--arch', type=str, default='resnet18', choices=['vgg16', 'resnet18'])
    parser.add_argument('-d', '--dataset', type=str, default='citystreet',
                        choices=['wildtrack', 'multiviewx', 'citystreet', 'cvcs'])
    parser.add_argument('--data_root', type=str, default='/mnt/data/Datasets')  # determined by the dataset directory
    parser.add_argument('--proj_root', type=str,
                        default='/mnt/data/Yunfei/Study/MVD_VCW')  # need to be changed by yourself
    parser.add_argument('--pretrain', type=str, default=None, help="The pretrained model which could be loaded.")
    parser.add_argument('-j', '--num_workers', type=int, default=4)
    parser.add_argument('-b', '--batch_size', type=int, default=1, metavar='N',
                        help='input batch size for training (default: 1)')

    parser.add_argument('--epochs', type=int, default=100, metavar='N', help='number of epochs to train (default: 10)')
    parser.add_argument('--val_epochs', type=int, default=5)
    parser.add_argument('--lr', type=float, default=0.01, metavar='LR', help='learning rate (default: 0.1)')
    parser.add_argument('--lrfac', type=float, default=0.01, help='generating smaller lr')
    parser.add_argument('--lr_decay', '--ld', type=float, default=1e-4)
    parser.add_argument('--lr_scheduler', '--lrs', type=str, default='onecycle', choices=['onecycle', 'lambda', 'step'])
    parser.add_argument('--weight_decay', type=float, default=1e-4)
    parser.add_argument('--momentum', type=float, default=0.9, metavar='M', help='SGD momentum (default: 0.5)')
    parser.add_argument('--log_interval', type=int, default=50, metavar='N',
                        help='how many batches to wait before logging training status')
    parser.add_argument('--resume', type=str, default=None)
    parser.add_argument('--visualize', action='store_true')
    parser.add_argument('--seed', type=int, default=1, help='random seed (default: None)')
    parser.add_argument('--test', type=str, default=None)

    parser.add_argument('--facofmaxgt', '--fm', type=float, default=100,
                        help='The factor is really important which affects the performance of the model. It is used to enlarge'
                             'the pixel value of the probability map generated by Gasuuian operations for better training.'
                             'Note that the factor in the pretrained dataset&model should be the same as the one used in'
                             'the current dataset.')
    parser.add_argument('--facofmaxgt_gp', '--fmg', type=float, default=10)

    parser.add_argument('--fix_2D', type=float, default=1)
    parser.add_argument('--fix_svp', type=float, default=0)
    parser.add_argument('--fix_weight', type=float, default=0)

    parser.add_argument('--map_sigma', '--ms', type=float, default=3)
    parser.add_argument('--img_reduce', '--ir', type=float, default=2)
    parser.add_argument('--world_reduce', '--wr', type=float, default=2)

    parser.add_argument('--weight_svp', type=float, default=1)
    parser.add_argument('--weight_2D', type=float, default=1)

    parser.add_argument('--cls_thres', '--ct', type=float, default=0.4)
    parser.add_argument('--nms_thres', '--nt', type=float, default=40)
    parser.add_argument('--dist_thres', '--dt', type=float, default=80)

    # parser.add_argument('--person_heights', '--ph', type=list, default=[0, 600, 1200, 1800])
    parser.add_argument('--person_heights', '--ph', type=list, default=[1750])
    parser.add_argument('--devices', '--cd', type=list, default=['cuda:0', 'cuda:1'])
    args = parser.parse_args()

    main(args)
